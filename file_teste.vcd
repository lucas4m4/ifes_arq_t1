$date
	Tue Oct 03 21:01:03 2017
$end
$version
	ModelSim Version 10.4a
$end
$timescale
	1ns
$end

$scope module testebench_alu $end
$var reg 32 ! a [31:0] $end
$var reg 32 " b [31:0] $end
$var reg 2 # ALUControl [1:0] $end
$var wire 1 $ Result [31] $end
$var wire 1 % Result [30] $end
$var wire 1 & Result [29] $end
$var wire 1 ' Result [28] $end
$var wire 1 ( Result [27] $end
$var wire 1 ) Result [26] $end
$var wire 1 * Result [25] $end
$var wire 1 + Result [24] $end
$var wire 1 , Result [23] $end
$var wire 1 - Result [22] $end
$var wire 1 . Result [21] $end
$var wire 1 / Result [20] $end
$var wire 1 0 Result [19] $end
$var wire 1 1 Result [18] $end
$var wire 1 2 Result [17] $end
$var wire 1 3 Result [16] $end
$var wire 1 4 Result [15] $end
$var wire 1 5 Result [14] $end
$var wire 1 6 Result [13] $end
$var wire 1 7 Result [12] $end
$var wire 1 8 Result [11] $end
$var wire 1 9 Result [10] $end
$var wire 1 : Result [9] $end
$var wire 1 ; Result [8] $end
$var wire 1 < Result [7] $end
$var wire 1 = Result [6] $end
$var wire 1 > Result [5] $end
$var wire 1 ? Result [4] $end
$var wire 1 @ Result [3] $end
$var wire 1 A Result [2] $end
$var wire 1 B Result [1] $end
$var wire 1 C Result [0] $end
$var wire 1 D ALUFlags [3] $end
$var wire 1 E ALUFlags [2] $end
$var wire 1 F ALUFlags [1] $end
$var wire 1 G ALUFlags [0] $end

$scope module u1 $end
$var wire 1 H a [31] $end
$var wire 1 I a [30] $end
$var wire 1 J a [29] $end
$var wire 1 K a [28] $end
$var wire 1 L a [27] $end
$var wire 1 M a [26] $end
$var wire 1 N a [25] $end
$var wire 1 O a [24] $end
$var wire 1 P a [23] $end
$var wire 1 Q a [22] $end
$var wire 1 R a [21] $end
$var wire 1 S a [20] $end
$var wire 1 T a [19] $end
$var wire 1 U a [18] $end
$var wire 1 V a [17] $end
$var wire 1 W a [16] $end
$var wire 1 X a [15] $end
$var wire 1 Y a [14] $end
$var wire 1 Z a [13] $end
$var wire 1 [ a [12] $end
$var wire 1 \ a [11] $end
$var wire 1 ] a [10] $end
$var wire 1 ^ a [9] $end
$var wire 1 _ a [8] $end
$var wire 1 ` a [7] $end
$var wire 1 a a [6] $end
$var wire 1 b a [5] $end
$var wire 1 c a [4] $end
$var wire 1 d a [3] $end
$var wire 1 e a [2] $end
$var wire 1 f a [1] $end
$var wire 1 g a [0] $end
$var wire 1 h b [31] $end
$var wire 1 i b [30] $end
$var wire 1 j b [29] $end
$var wire 1 k b [28] $end
$var wire 1 l b [27] $end
$var wire 1 m b [26] $end
$var wire 1 n b [25] $end
$var wire 1 o b [24] $end
$var wire 1 p b [23] $end
$var wire 1 q b [22] $end
$var wire 1 r b [21] $end
$var wire 1 s b [20] $end
$var wire 1 t b [19] $end
$var wire 1 u b [18] $end
$var wire 1 v b [17] $end
$var wire 1 w b [16] $end
$var wire 1 x b [15] $end
$var wire 1 y b [14] $end
$var wire 1 z b [13] $end
$var wire 1 { b [12] $end
$var wire 1 | b [11] $end
$var wire 1 } b [10] $end
$var wire 1 ~ b [9] $end
$var wire 1 !! b [8] $end
$var wire 1 "! b [7] $end
$var wire 1 #! b [6] $end
$var wire 1 $! b [5] $end
$var wire 1 %! b [4] $end
$var wire 1 &! b [3] $end
$var wire 1 '! b [2] $end
$var wire 1 (! b [1] $end
$var wire 1 )! b [0] $end
$var wire 1 *! ALUControl [1] $end
$var wire 1 +! ALUControl [0] $end
$var reg 32 ,! Result [31:0] $end
$var reg 4 -! ALUFlags [3:0] $end
$var reg 1 .! neg $end
$var reg 1 /! zero $end
$var reg 1 0! carrt $end
$var reg 1 1! verflow $end
$var reg 32 2! condinvb [31:0] $end
$var reg 33 3! sum [32:0] $end
$var wire 1 4! carry $end
$var wire 1 5! overflow $end
$upscope $end
$upscope $end

$scope begin std $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11111111111111111111111111111 !
b11111111111111111111111111111 "
b0 #
b111111111111111111111111111110 ,!
b0 -!
0.!
0/!
x0!
x1!
b11111111111111111111111111111 2!
b111111111111111111111111111110 3!
0C
1B
1A
1@
1?
1>
1=
1<
1;
1:
19
18
17
16
15
14
13
12
11
10
1/
1.
1-
1,
1+
1*
1)
1(
1'
1&
0%
0$
0G
0F
0E
0D
04!
05!
1g
1f
1e
1d
1c
1b
1a
1`
1_
1^
1]
1\
1[
1Z
1Y
1X
1W
1V
1U
1T
1S
1R
1Q
1P
1O
1N
1M
1L
1K
0J
0I
0H
1)!
1(!
1'!
1&!
1%!
1$!
1#!
1"!
1!!
1~
1}
1|
1{
1z
1y
1x
1w
1v
1u
1t
1s
1r
1q
1p
1o
1n
1m
1l
1k
0j
0i
0h
0+!
0*!
$end
#100
b11111111000011111111111111111111 !
b11111111111111111111111111111111 "
b10 #
1*!
1j
1i
1h
0S
0R
0